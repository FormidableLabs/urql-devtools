version: 2

.variables:
  # Cache keys
  - &node_modules_cache_key node-cache-{{ checksum "yarn.lock" }}-{{ checksum ".circleci/config.yml" }}
  - &build_cache_key build-cache-{{ .Revision }}
  - &cosmos_cache_key cosmos-cache-{{ .Revision }}

  # Restore cache
  - &restore_node_modules_cache
    restore_cache:
      keys:
        - *node_modules_cache_key
  - &restore_build_cache
    restore_cache:
      keys:
        - *build_cache_key
  - &restore_cosmos_cache
    restore_cache:
      keys:
        - *cosmos_cache_key

  # Environments
  - &node_env
    docker:
      - image: node:13

jobs:
  install:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run:
          name: Check for dependencies
          command: "([[ -d node_modules ]] && circleci-agent step halt) || exit 0"
      - run: yarn install --frozen-lockfile
      - run: chmod -R 777 node_modules
      - save_cache:
          key: *node_modules_cache_key
          paths:
            - node_modules

  lint:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn run lint

  prettier:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn run lint:prettier

  test:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: TZ=Europe/London yarn run test --coverage

  cosmos export:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn run cosmos:build
      - run: chmod -R 777 cosmos-export
      - save_cache:
          key: *cosmos_cache_key
          paths:
            - cosmos-export

  visual regression:
    parallelism: 4
    docker:
      - image: alekzonder/puppeteer:latest
    environment:
      COSMOS_HOST: localhost
      COSMOS_PORT: 5000
    steps:
      - checkout
      - *restore_cosmos_cache
      - run: npx serve cosmos-export -l $COSMOS_PORT &
      - *restore_node_modules_cache
      - run: yarn run visual-regression:exec
      - store_artifacts:
          path: src/panel/__image_snapshots__/__diff_output__/

  build:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: apt-get update && apt-get -y install zip
      - run: yarn run build
      - run: yarn run bundle
      - save_cache:
          key: *build_cache_key
          paths:
            - dist
            - extension.zip
      - store_artifacts:
          path: extension.zip
      - store_artifacts:
          path: dist/electron

  lint firefox:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - *restore_build_cache
      - run: yarn run lint:firefox

  verify version:
    <<: *node_env
    steps:
      - checkout
      - run:
          command: |
            node -e "process.env.CIRCLE_TAG === \`v\${require('./package.json').version}\` ? process.exit(0) : (console.error('Tag version does not line up with version in package.json') || process.exit(1))"
            (sed -n '3p' CHANGELOG.md | grep -i $CIRCLE_TAG) && echo "Version documented in changelog" || (echo "Version not documented in changelog" && exit 1)

  deploy chrome:
    docker:
      - image: cibuilds/chrome-extension
    steps:
      - checkout
      - *restore_build_cache
      - run:
          command: |
            ACCESS_TOKEN=$(curl --fail "https://www.googleapis.com/oauth2/v4/token" -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&refresh_token=${REFRESH_TOKEN}&grant_type=refresh_token" | jq -r .access_token)
            curl --fail -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -X PUT -T ./extension.zip "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${APP_ID}"
            curl --fail -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -H "Content-Length: 0" -X POST "https://www.googleapis.com/chromewebstore/v1.1/items/${APP_ID}/publish"

  deploy firefox:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - *restore_build_cache
      - run:
          command: |
            cd dist/extension
            ERR=$($(npm bin)/web-ext sign --channel listed --api-key $FIREFOX_API_KEY --api-secret $FIREFOX_API_SECRET --id {c11f3a69-f159-4708-b044-853066c2d2fe} || true)
            (grep -qi "Your add-on has been submitted for review" <<< $ERR) && echo "Addon submitted for review." || (echo "Addon not submitted for review" && echo $ERR && exit 1)

  deploy npm:
    <<: *node_env
    steps:
      - checkout
      - *restore_node_modules_cache
      - *restore_build_cache
      - run:
          command: |
            npm config set "//registry.npmjs.org/:_authToken" "$npm_TOKEN"
            npm publish --access public --tag $([[ "$CIRCLE_TAG" == *"-"* ]] && echo "next" || echo "latest")

workflows:
  version: 2
  build_and_test:
    jobs:
      - install:
          filters:
            tags:
              only: /.*/
      # - lint:
      #     requires:
      #       - install
      #     filters:
      #       tags:
      #         only: /.*/
      # - prettier:
      #     requires:
      #       - install
      #     filters:
      #       tags:
      #         only: /.*/
      # - test:
      #     requires:
      #       - install
      #     filters:
      #       tags:
      #         only: /.*/
      - cosmos export:
          requires:
            - install
          filters:
            tags:
              only: /.*/
      - visual regression:
          requires:
            - install
            - cosmos export
          filters:
            tags:
              only: /.*/
      # - build:
      #     requires:
      #       - install
      #     filters:
      #       tags:
      #         only: /.*/
      # - verify version:
      #     requires:
      #       - build
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/
      # - lint firefox:
      #     requires:
      #       - build
      #     filters:
      #       tags:
      #         only: /.*/
      # - deploy chrome:
      #     requires:
      #       - install
      #       - lint
      #       - prettier
      #       - test
      #       - build
      #       - visual regression
      #       - lint firefox
      #       - verify version
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/
      # - deploy firefox:
      #     requires:
      #       - install
      #       - lint
      #       - prettier
      #       - test
      #       - build
      #       - visual regression
      #       - lint firefox
      #       - verify version
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/
      # - deploy npm:
      #     requires:
      #       - install
      #       - lint
      #       - prettier
      #       - test
      #       - build
      #       - visual regression
      #       - lint firefox
      #       - verify version
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         ignore: /.*/
